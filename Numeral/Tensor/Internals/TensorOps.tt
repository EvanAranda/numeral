<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="Tensor.dsl" #>

using System;
using System.Buffers;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace Numeral.Internals
{
<#
foreach (var type in DSL.DTypes)
{
    var t = type.ClassName;
#>
<# 
foreach (var method in DSL.BinaryMethods)
{
    if (!method.SupportsType(type)) continue;
    var opClassName = $"{method.Name}_{t}";
    var r = method.IsComp ? "bool" : t;
    var f = method.CanVectorize ? "VecOp" : "Op";
#>
    public class <#= opClassName #> : BinaryOperation<<#= t #>, <#= t #>, <#= r #>>
    {
        internal <#= opClassName #>() : base(<#= f #>) { }
        public static readonly <#= opClassName #> Instance = new();
        public static void Op(in ReadOnlySpan<<#= t #>> x, in ReadOnlySpan<<#= t #>> y, in Span<<#= r #>> z)
        {
            for (int i = 0; i < x.Length; i++)
                z[i] = (<#= r #>)(<#= method.GetOpCode("x[i]", "y[i]") #>);
        }
<# if (method.CanVectorize) { #>
        public static void VecOp(in ReadOnlySpan<<#= t #>> x, in ReadOnlySpan<<#= t #>> y, in Span<<#= r #>> z)
        {
            int i = 0;
            var offset = Vector<<#= t #>>.Count;
            if (x.Length >= offset)
            {
                var n = x.Length / offset * offset;
                unsafe
                {
                    fixed (<#= t #>* px = x, py = y)
                    fixed (<#= r #>* pz = z)
                    {
                        var t = Vector.<#= method.VecName #>(
                            Unsafe.Read<Vector<<#= t #>>>(px + i),
                            Unsafe.Read<Vector<<#= t #>>>(py + i));
<# if (method.IsComp) { #>
                        for (int j = i; j < offset; j++)
                            z[j] = t[j] == <#= method.TrueVal #>;
<# } else { #>
                        Unsafe.Write(pz + i, t);
<# } #>
                    }
                }
            }   
            if (i < x.Length)
                Op(x[i..], y[i..], z[i..]);
        }
<# } // end canvectorize #>
    }
<#
} // end binary methods
#>

<# 
foreach (var method in DSL.UnaryMethods)
{
    if (!method.SupportsType(type)) continue;
    var opClassName = $"{method.Name}_{t}";
    var f = method.CanVectorize ? "VecOp" : "Op";
    var r = t;
#>
    public class <#= opClassName #> : UnaryOperation<<#= t #>, <#= r #>>
    {
        internal <#= opClassName #>() : base(<#= f #>) { }
        public static readonly <#= opClassName #> Instance = new();
        public static void Op(in ReadOnlySpan<<#= t #>> x, in Span<<#= r #>> z)
        {
            for (int i = 0; i < x.Length; i++)
                z[i] = (<#= r #>)(<#= method.GetOpCode("x[i]") #>);
        }
<# if (method.CanVectorize) { #>
        public static void VecOp(in ReadOnlySpan<<#= t #>> x, in Span<<#= r #>> z)
        {
            int i = 0;
            var offset = Vector<<#= t #>>.Count;
            if (x.Length >= offset)
            {
                var n = x.Length / offset * offset;
                unsafe
                {
                    fixed (<#= t #>* px = x)
                    fixed (<#= r #>* pz = z)
                    {
                        var t = Vector.<#= method.VecName #>(
                            Unsafe.Read<Vector<<#= t #>>>(px + i));
                        Unsafe.Write(pz + i, t);
                    }
                }
            }
            if (i < x.Length)
                Op(x[i..], z[i..]);
        }
<# } // end canvectorize #>
    }
<#
} // end unary methods
#>

<# 
foreach (var method in DSL.ReducerMethods)
{
    if (!method.SupportsType(type)) continue;
    var opClassName = $"{method.Name}_{t}";
    var r = t;
#>
    public class <#= opClassName #> : ReductionOperation<<#= t #>, <#= r #>>
    {
        internal <#= opClassName #>() : base(Op) { }
        public static readonly <#= opClassName #> Instance = new();
        public static void Op(in ReadOnlySpan<<#= t #>> x, in Span<<#= r #>> z)
        {
            var tmp = x[0];
            for (int i = 1; i < x.Length; i++)
                tmp = (<#= r #>)(<#= method.GetOpCode("x[i]", "tmp") #>);
            z[0] = tmp;
        }
    }
<#
} // end reducer methods
#>
<# 
foreach (var method in DSL.AccumulatorMethods)
{
    if (!method.SupportsType(type)) continue;
    var opClassName = $"{method.Name}_{t}";
    var r = t;
#>
    public class <#= opClassName #> : AccumulateOperation<<#= t #>, <#= r #>>
    {
        internal <#= opClassName #>() : base(Op) { }
        public static readonly <#= opClassName #> Instance = new();
        public static void Op(in ReadOnlySpan<<#= t #>> x, in Span<<#= r #>> z)
        {
            var tmp = x[0];
            z[0] = tmp;
            for (int i = 1; i < x.Length; i++)
            {
                tmp = (<#= r #>)(<#= method.GetOpCode("x[i]", "tmp") #>);
                z[i] = tmp;
            }
            z[0] = tmp;
        }
    }
<#
} // end accumulator methods
#>
<#
} // end dtypes
#>
}