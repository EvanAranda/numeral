<#@ template language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Tensor.ttinclude" #>

using System;
using System.Buffers;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace Numeral.Internals
{
<#
foreach (var type in DSL.DTypes)
{
    var t = type.ClassName;
#>
    public class CpuArithmetic_<#= t #> : ITensorArithmetic<<#= t #>>
    {
<#
foreach (var method in DSL.BinaryMethods)
{
    var r = method.IsComp ? "bool" : t;
    var propType = $"IBinaryOperation<{t}, {t}, {r}>";
    var returnVal = method.SupportsType(type) ?
        $"{{ get; }} = {method.Name}_{t}.Instance" : 
        $"=> throw new NotSupportedException()";
#>
        public <#= propType #> <#= method.Name #> <#= returnVal #>;
<#
} // end binary methods
#>
<#
foreach (var method in DSL.UnaryMethods)
{
    var propType = $"IUnaryOperation<{t}, {t}>";
    var returnVal = method.SupportsType(type) ?
        $"{{ get; }} = {method.Name}_{t}.Instance" : 
        $"=> throw new NotSupportedException()";
#>
        public <#= propType #> <#= method.Name #> <#= returnVal #>;
<#
} // end unary methods
#>
<#
foreach (var method in DSL.ReducerMethods)
{
    var propType = $"IReductionOperation<{t}, {t}>";
    var returnVal = method.SupportsType(type) ?
        $"{{ get; }} = {method.Name}_{t}.Instance" : 
        $"=> throw new NotSupportedException()";
#>
        public <#= propType #> <#= method.Name #> <#= returnVal #>;
<#
} // end reducer methods
#>
<#
foreach (var method in DSL.AccumulatorMethods)
{
    var propType = $"IAccumulateOperation<{t}, {t}>";
    var returnVal = method.SupportsType(type) ?
        $"{{ get; }} = {method.Name}_{t}.Instance" : 
        $"=> throw new NotSupportedException()";
#>
        public <#= propType #> <#= method.Name #> <#= returnVal #>;
<#
} // end accumulator methods
#>
    }
<#
} // end types
#>
}